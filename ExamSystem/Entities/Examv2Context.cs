// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace ExamSystem.Entities
{
    public partial class Examv2Context : DbContext
    {
        public Examv2Context()
        {
        }

        public Examv2Context(DbContextOptions<Examv2Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Choice> Choices { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentCourse> DepartmentCourses { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<InstructorCourse> InstructorCourses { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentAnswer> StudentAnswers { get; set; }
        public virtual DbSet<StudentCourse> StudentCourses { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Arabic_CI_AS");

            modelBuilder.Entity<Choice>(entity =>
            {
                entity.HasKey(e => new { e.choiceID, e.questionID })
                    .HasName("PK__Choice__20E83E8ED4BD2C15");

                entity.ToTable("Choice");

                entity.Property(e => e.choiceID).ValueGeneratedOnAdd();

                entity.Property(e => e.choiceBody)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.question)
                    .WithMany(p => p.Choices)
                    .HasForeignKey(d => d.questionID)
                    .HasConstraintName("FK__Choice__question__75A278F5");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.ToTable("Course");

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasKey(e => e.deptID)
                    .HasName("PK__Departme__BE2D26D694B512E5");

                entity.ToTable("Department");

                entity.Property(e => e.description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.location)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.manager)
                    .WithMany(p => p.Departments)
                    .HasForeignKey(d => d.managerID)
                    .HasConstraintName("FK__Departmen__manag__76969D2E");
            });

            modelBuilder.Entity<DepartmentCourse>(entity =>
            {
                entity.HasKey(e => new { e.deptID, e.courseID })
                    .HasName("PK__Departme__BC87A229F0F7AB34");

                entity.ToTable("DepartmentCourse");

                entity.HasOne(d => d.course)
                    .WithMany(p => p.DepartmentCourses)
                    .HasForeignKey(d => d.courseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Departmen__cours__787EE5A0");

                entity.HasOne(d => d.dept)
                    .WithMany(p => p.DepartmentCourses)
                    .HasForeignKey(d => d.deptID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Departmen__deptI__778AC167");
            });

            modelBuilder.Entity<Exam>(entity =>
            {
                entity.ToTable("Exam");

                entity.HasOne(d => d.course)
                    .WithMany(p => p.Exams)
                    .HasForeignKey(d => d.courseID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK__Exam__courseID__797309D9");
            });

            modelBuilder.Entity<Instructor>(entity =>
            {
                entity.HasKey(e => e.InsID)
                    .HasName("PK__Instruct__9D104D8F39600100");

                entity.ToTable("Instructor");

                entity.Property(e => e.degree)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.dept)
                    .WithMany(p => p.Instructors)
                    .HasForeignKey(d => d.deptID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK__Instructo__deptI__7B5B524B");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.Instructors)
                    .HasForeignKey(d => d.userID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK__Instructo__userI__7A672E12");
            });

            modelBuilder.Entity<InstructorCourse>(entity =>
            {
                entity.HasKey(e => new { e.InsID, e.courseID })
                    .HasName("PK__Instruct__9FBAC970EFF13D0F");

                entity.ToTable("InstructorCourse");

                entity.HasOne(d => d.Ins)
                    .WithMany(p => p.InstructorCourses)
                    .HasForeignKey(d => d.InsID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Instructo__InsID__7C4F7684");

                entity.HasOne(d => d.course)
                    .WithMany(p => p.InstructorCourses)
                    .HasForeignKey(d => d.courseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Instructo__cours__7D439ABD");
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.ToTable("Question");

                entity.Property(e => e.body)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.modelAnswer)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.course)
                    .WithMany(p => p.Questions)
                    .HasForeignKey(d => d.courseID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK__Question__course__7E37BEF6");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.ToTable("Student");

                entity.Property(e => e.studentID).ValueGeneratedNever();

                entity.Property(e => e.address)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.dept)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.deptID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK__Student__deptID__7F2BE32F");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.userID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK__Student__userID__00200768");
            });

            modelBuilder.Entity<StudentAnswer>(entity =>
            {
                entity.HasKey(e => new { e.studentID, e.questionID, e.examID })
                    .HasName("PK__StudentA__45973607E6A2EF4A");

                entity.Property(e => e.studentAnswer1).HasColumnName("studentAnswer");

                entity.HasOne(d => d.exam)
                    .WithMany(p => p.StudentAnswers)
                    .HasForeignKey(d => d.examID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__StudentAn__examI__02FC7413");

                entity.HasOne(d => d.student)
                    .WithMany(p => p.StudentAnswers)
                    .HasForeignKey(d => d.studentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__StudentAn__stude__01142BA1");
            });

            modelBuilder.Entity<StudentCourse>(entity =>
            {
                entity.HasKey(e => new { e.studentID, e.courseID })
                    .HasName("PK__StudentC__4FBB52A3AD397FF9");

                entity.ToTable("StudentCourse");

                entity.Property(e => e.status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.course)
                    .WithMany(p => p.StudentCourses)
                    .HasForeignKey(d => d.courseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__StudentCo__cours__04E4BC85");

                entity.HasOne(d => d.student)
                    .WithMany(p => p.StudentCourses)
                    .HasForeignKey(d => d.studentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__StudentCo__stude__03F0984C");
            });

            modelBuilder.Entity<Topic>(entity =>
            {
                entity.ToTable("Topic");

                entity.Property(e => e.topicName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.course)
                    .WithMany(p => p.Topics)
                    .HasForeignKey(d => d.courseID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK__Topic__courseID__05D8E0BE");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.password)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings["Examdb"].ConnectionString);
            }
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}